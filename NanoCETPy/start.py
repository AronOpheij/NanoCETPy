# -*- coding: utf-8 -*-
"""
    .. todo::
        Save diagnostic images in the h5 datafile:

        #. After manual alignment, an image from the "bottom-camera" illuminated with the white TOP LED.
        #. After the initial alignment procedure, an image from the "top-camera" of the core of the fiber (with
        the red LED).
        #. Preferably after the final alignment procedure, an image with the "bottom-camera", of the laser
        scattered background.

        For the moment, add these to each h5 file measured after this alignment.

    .. todo:
        The filename displayed in the GUI is incorrect. It should not be grabbed from disk, but generated by
        experiment.
    .. todo:
        (low priority) Sometimes there are json related python errors when closing the measurement.
        These don't appear to cause actual trouble though.

    :copyright: 2022 by NanoCETPy Authors. See AUTHORS for full list
    :LICENSE: GPLv3. See LICENSE for more information
"""
import os
import sys
from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication
from experimentor.lib.log import get_logger, log_to_screen
from NanoCETPy.models.experiment import MainSetup
from NanoCETPy.views.sequential_window import SequentialMainWindow
from NanoCETPy import BASE_PATH, USER_CONFIG_PATH
import yaml

def main(*args, **kwargs):
    """
    Standard entry point to run the nanoCET software.
    It can be used as a function and also from command line.
    This function is also called when running the nanocet command (from command line)

    Possible arguments that can be passed are:
    - 'reset-config'        This will delete the existing user config file and load the default config.
    - 'return-debug'        This will return the experiment and main_window object for debugging purposes.

    Keyword arguments are passed to the experiment class. Current options are:
    - simulate_waterfall    (str) Full path to the h5 data file to be used for simulating the waterfall.
    - skip_aligning         (bool) When True, skips piezo moves during alignment procedure.

    To pass keyword arguments from command line use, an equal sign between the key and the value.
    Example:
        nanocet skip_sligning=True
    """
    args = list(args)
    if not kwargs:
        for arg in sys.argv[1:]:
            if '=' in arg:
                value = '='.join(arg.split('=')[1:]).strip('\'\"')
                value = False if value.lower() in ('0', 'false') else value
                value = True if value.lower() in ('1', 'true') else value
                kwargs[arg.split('=')[0]] = value
            else:
                args.append(arg)
    config_filepath = USER_CONFIG_PATH
    if 'reset-config' in args and config_filepath.exists():
        config_filepath.unlink()
    if not config_filepath.is_file():
        config_filepath = BASE_PATH / 'resources/config_default.yml'

    with open(config_filepath, 'r') as f:
        config = yaml.unsafe_load(f)

    logger = get_logger(name='nanoCET')
    fmt = "[%(levelname)8s] %(asctime)s | %(filename)s:%(lineno)s:  %(message)s"  # Used during debugging
    log_to_screen(logger=logger, fmt=fmt, level=config['defaults'].get('logging_level', 'WARNING'))

    experiment = MainSetup(**kwargs)
    experiment.load_configuration(config_filepath)

    # QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    # QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    app = QApplication([])
    fontId = QtGui.QFontDatabase.addApplicationFont(str(BASE_PATH / 'resources' / 'Roboto-Regular.ttf'))
    families = QtGui.QFontDatabase.applicationFontFamilies(fontId)
    font = QtGui.QFont(families[0])
    app.setFont(font)
    main_window = SequentialMainWindow(experiment=experiment)
    main_window.show()
    app.exec()
    experiment.finalize()
    if 'return-debug' in args:
        return experiment, main_window
    else:
        sys.exit()

if __name__ == '__main__':
    experiment, main_window = main('return-debug')
