# -*- coding: utf-8 -*-
"""
    .. todo::
        Save diagnostic images in the h5 datafile:

        #. After manual alignment, an image from the "bottom-camera" illuminated with the white TOP LED.
        #. After the initial alignment procedure, an image from the "top-camera" of the core of the fiber (with
        the red LED).
        #. Preferably after the final alignment procedure, an image with the "bottom-camera", of the laser
        scattered background.

        For the moment, add these to each h5 file measured after this alignment.

    .. todo:
        The filename displayed in the GUI is incorrect. It should not be grabbed from disk, but generated by
        experiment.
    .. todo:
        (low priority) Sometimes there are json related python errors when closing the measurement.
        These don't appear to cause actual trouble though.

    :copyright: 2022 by NanoCETPy Authors. See AUTHORS for full list
    :LICENSE: GPLv3. See LICENSE for more information
"""
import os
import sys
import yaml
from PyQt5 import QtGui
from PyQt5.QtWidgets import QApplication
from experimentor.lib.log import get_logger, log_to_screen
from NanoCETPy.models.experiment import MainSetup
from NanoCETPy.views.sequential_window import SequentialMainWindow
from NanoCETPy import BASE_PATH, USER_CONFIG_PATH


def main(**kwargs):
    """
    Standard entry point to run the nanoCET software. Can be called from command line.
    If the user config file doesn't exist, the built-in default config will be used (and
    the user config will be generated when the software is closed).

    When called as a function, keyword arguments will be passed to the MainSetup class.
    When called from command line, keyword arguments can be passed as key=value
    Example:    python start.py skip_aligning=True simulate_waterfall=C:\\Temp\\my_data.h5

    Special command line argument is reset-config, which will delete the existing
    user config file and load the default config.
    Example:    python start.py reset-config
    """
    logger = get_logger()
    log_to_screen(logger=logger)
    config_filepath = USER_CONFIG_PATH
    if 'reset-config' in sys.argv[1:] and config_filepath.exists():
        config_filepath.unlink()
    if not config_filepath.is_file():
        config_filepath = BASE_PATH / 'resources/config_default.yml'
    if not kwargs:
        for arg in sys.argv[1:]:
            if '=' in arg:
                value = '='.join(arg.split('=')[1:]).strip('\'\"')
                value = False if value.lower() in ('0', 'false') else value
                value = True if value.lower() in ('1', 'true') else value
                kwargs[arg.split('=')[0]] = value
    experiment = MainSetup(**kwargs)
    experiment.load_configuration(config_filepath)

    # QApplication.setAttribute(Qt.AA_EnableHighDpiScaling, True)
    # QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps, True)
    os.environ["QT_AUTO_SCREEN_SCALE_FACTOR"] = "1"
    app = QApplication([])
    fontId = QtGui.QFontDatabase.addApplicationFont(str(BASE_PATH / 'resources' / 'Roboto-Regular.ttf'))
    families = QtGui.QFontDatabase.applicationFontFamilies(fontId)
    font = QtGui.QFont(families[0])
    app.setFont(font)
    main_window = SequentialMainWindow(experiment=experiment)
    main_window.show()
    app.exec()
    experiment.finalize()
    return experiment  # return the experiment object for debugging


if __name__ == '__main__':
    debug = main()
